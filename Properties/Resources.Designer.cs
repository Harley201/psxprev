//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PSXPrev.Properties {
    using System;
    
    
    /// <summary>
    ///   Uma classe de recurso de tipo de alta segurança, para pesquisar cadeias de caracteres localizadas etc.
    /// </summary>
    // Essa classe foi gerada automaticamente pela classe StronglyTypedResourceBuilder
    // através de uma ferramenta como ResGen ou Visual Studio.
    // Para adicionar ou remover um associado, edite o arquivo .ResX e execute ResGen novamente
    // com a opção /str, ou recrie o projeto do VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Retorna a instância de ResourceManager armazenada em cache usada por essa classe.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("PSXPrev.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Substitui a propriedade CurrentUICulture do thread atual para todas as
        ///   pesquisas de recursos que usam essa classe de recurso de tipo de alta segurança.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a #version 150
        ///in vec4 pass_Color;
        ///in vec2 pass_Uv;
        ///in vec4 pass_Diffuse;
        ///in vec4 pass_Ambient;
        ///in float pass_NormalDotLight;
        ///
        ///out vec4 out_Color;
        ///
        ///uniform mat4 mvpMatrix;
        ///uniform vec3 lightDirection;
        ///uniform sampler2D mainTex;
        ///
        ///void main(void) {	
        ///	vec4 finalColor;
        ///	vec4 diffuseNorm = pass_Diffuse * pass_NormalDotLight;
        ///	vec4 tex2D = texture(mainTex, pass_Uv) * pass_Color;
        ///	finalColor =  (pass_Ambient + diffuseNorm) * tex2D;
        ///	out_Color = finalColor; 
        ///}.
        /// </summary>
        internal static string Shader_frag {
            get {
                return ResourceManager.GetString("Shader.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a #version 150
        ///in vec3 in_Position;
        ///in vec3 in_Color; 
        ///in vec3 in_Normal;
        ///in vec3 in_Uv;
        ///
        ///out vec4 pass_Color;
        ///out vec2 pass_Uv;
        ///out float pass_NormalDotLight;
        ///out vec4 pass_Diffuse;
        ///out vec4 pass_Ambient;
        ///
        ///uniform mat4 mvpMatrix;
        ///uniform vec3 lightDirection;
        ///uniform sampler2D mainTex;
        ///
        ///const vec4 ambient = vec4(0.5, 0.5, 0.5, 1.0);
        ///const vec4 diffuse = vec4(0.75, 0.75, 0.75, 1.0);
        ///
        ///void main(void) {	
        ///    gl_Position = mvpMatrix * vec4(in_Position, 1.0);					
        ///	pass_NormalDotLight = clamp( [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string Shader_vert {
            get {
                return ResourceManager.GetString("Shader.vert", resourceCulture);
            }
        }
    }
}
